@model CheatSheet
@{
    ViewData["Title"] = "Cheat Sheet Page";
}

<div class="text-center">
    <h1 class="display-4">Cheat Sheet</h1>

    @*FORM TAGS*@
    @*form tag should be around any form elements that you want to submit back to the server, including inputs, textareas etc*@
<form method="post" asp-controller="CheatSheet" asp-action="Index">
    <h3>LABELS</h3>
    <p>If you give the label's <i>for</i> attribute the same value as the control's ID, it'll link them. This will make the label area clickable as well.</p>
    <div>
        <label for="FirstName">First name:</label>
        <input asp-for="FirstName" />
    </div>
    <p>
        To connect the label to a Model use <i>asp-for</i>. Note that you no longer have to specify the text of the label as it'll be pulled from the Model, and the
        HTML for attribute will be automatically generated.
    </p>
    <div>
        <label asp-for="FirstName"></label>
        <input asp-for="FirstName" />
    </div>
    <br />
    <h3>INPUTS</h3>
    <p>The Input Tag Helper only has the <i>asp-for</i> attribute. This allows you to bind the Input control to a property on the Model. In this case the input is populated with 'Aslett' because this value is set in the Model.</p>
    <div>
        <label asp-for="LastName"></label>
        <input asp-for="LastName" />
    </div>
    <br />

    <h5>Using Data Annotations to denote type</h5>
    <div>
        <label asp-for="MailAddress"></label>
        <input asp-for="MailAddress" />
    </div>
    <div>
        <label asp-for="PhoneNumber"></label>
        <input asp-for="PhoneNumber" />
    </div>
    <div>
        <label asp-for="Password"></label>
        <input asp-for="Password" />
    </div>
    <div>
        <label asp-for="DateOfBirth"></label>
        <input asp-for="DateOfBirth" />
    </div>
    <div>
        <label asp-for="IsActive"></label>
        <input asp-for="IsActive" />
    </div>
    <br />
    <h3>TEXTAREA</h3>
    <p>The TextArea Tag Helper uses the <i>asp-for.</i> If no size is specified then it will be decided by the browser:</p>

    <textarea asp-for="TextArea"></textarea>

    <p>Or you can specify a size in the markup:</p>

    <textarea asp-for="TextArea" style="height: 40px; width: 200px;"></textarea>

    <p>You can also specify min and max lengths in the Model. This has a min of 2 and a max of 25:</p>

    <textarea asp-for="TextAreaLength"></textarea>

    <p>Min lengths aren't part of the HTML specification, so there's no relevant attribute for the browser to work with. However, it's still relevant to specify on the Model, especially if you use Model Validation. The rendered result will show you that only max length is directly supported by the HTML specification - the min length is only rendered as a data attribute, to be used by client-side Model Validation.</p>

    <h3>SELECT</h3>
    <p>The Select Tag Helper has the <i>asp-for</i> attribute, which allows you to bind its selected value to a specific property on the Model. The <i>asp-items</i> tag allows you to provide a data source for the SELECT element. In this example the options are held in the Model:</p>

    <label asp-for="Gender" class="control-lable"></label>
    <select asp-for="Gender" asp-items="Model.Genders" class="custom-select">
        <option value="">Choose Gender</option>
    </select>
    <br />
    <br />
    <p>In this example the options are held in the Controller and passed through to the View:</p>

    <select asp-items="@(new SelectList(Model.Countries.Select(x => x.Name)))" asp-for="SelectedCountry"></select>
    <br />
    <br />
    <p>In the above examples no values are provided for the option tags, meaning that the text of the option will be used as the value when submitting. That's because we are generating the options from a simple list of strings, however in most situations you are more likely to generate lists based on a combination of keys and values, eg: the values may come from a database, where they use a number as ID's.</p>

    <select asp-items="@(new SelectList(Model.Countries, "Abbreviation", "Name"))" asp-for="SelectedCountry"></select>

    <select asp-items="@(new SelectList(Model.Countries, "Abbreviation", "NameAndAbbreviation"))" asp-for="SelectedCountry"></select>

    <select asp-items="@Model.Countries.Select(x => new SelectListItem(x.Name, x.Abbreviation))" asp-for="SelectedCountry"></select>
    <br />
    <br />
    <p>Another very common usage is with enumerations (enums), for example the DayOfWeek enumeration. This will assign numbers to the values, starting at 0:</p>

    <select asp-items="@(Html.GetEnumSelectList<DayOfWeek>())" asp-for="SelectedDay"></select>
    <br />
    <br />
    <h3>ANCHOR TAG</h3>

    <p>The Anchor Tag Helper can help you link to Actions on your Controller. The most commonly used attributes are <i>controller</i> and <i>action</i>, allowing you to speficy which Controller and Action to use.</p>

    <a asp-controller="Home" asp-action="Index">Link to Index Action on Home controller</a>
    <br />
    <br />

    <a asp-controller="Jonah" asp-action="Index">Link to Index Action on Jonah Controller</a>
    <br />
    <br />

    <p>There is also an <i>asp-route-{value}</i> attribute. Any value added in place of {value} is considered a route parameter. If a default route is not found, this value will be used to generate the URL as a request parameter and value:</p>

    <a asp-controller="CheatSheet" asp-action="Index" asp-route-id="12">Link to Jonah/Index/12</a>
    <br />
    <br />
    <p>In this example we generate a new link for each of the movies in the list and generate a new URL for each of them:</p>
    <ul>
        @foreach (var movie in Model.Movies)
        {
            <li>
                <a asp-controller="CheatSheet" asp-action="Index" asp-route-id="@movie.Id">@movie.Title</a>
            </li>
        }
    </ul>

    <p>If you want to refer to a specific part of the page, use the <i>asp-fragment</i> attribute:</p>

    <a asp-controller="CheatSheet" asp-action="Index" asp-fragment="test">Link using asp-fragment</a>

    <p>This enables you to link to an element on the same page that you're currently on, eg: for jumping to certain sections</p>

    <p>If you need to specify the host name in the link, eg: google.com then use <i>asp-host</i>. Usually not necessary because the value can be fetched from the website automatically:</p>

    <a asp-controller="CheatSheet" asp-action="Index" asp-host="google.com">Link using asp-host</a>

    <p>If you want to force a protocol other than the one used, eg: from http to https then use <i>asp-protocol</i>:</p>

    <a asp-controller="CheatSheet" asp-action="Index" asp-host="google.com" asp-protocol="https">Movie list</a>
    <br />
    <br />
    <h3>SCRIPT TAG</h3>

    <p>To import script files. Best practice is to use CDN with a local fallback. The Script Tag Helper can help with this. The Script Tag helper requires a value for the <i>fallback-src</i> attribute, as an alternative to the regular <i>src</i> attribute:</p>

    @Html.Raw("&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js&quot; asp-fallback-src=&quot;~&#47;Content&#47;jquery.min.js&quot;&gt;&lt;&#47;script&gt")

    <br />
    <br />
    <p>In this case, jQuery will be loaded from cdnjs first, but if that fails a local version will be requested instead. However, detecting that the CDN has failed to deliver the required JS file can be difficult, but it can be achieved with the <i>fallback-test</i> attribute:</p>

    @Html.Raw("&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js&quot; asp-fallback-src=&quot;~&#47;Content&#47;jquery.min.js&quot; asp-fallback-test=&quot;window.jQuery&quot;&gt&lt;&#47;script&gt")
    <br />
    <br />
    <p>This will ensure that if the CDN version didn't load then the fallback will be used.</p>
    <br />
    <br />
    <h3>LINK TAG</h3>

    <p>To import CSS files. Uses the <i>href</i> to dictate which file to use, and <i>fallback-href</i>, which will be the path used if the CDN version fails:</p>

    @Html.Raw("&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/js/bootstrap.min.js&quot; asp-fallback-href=&quot;~/Content/bootstrap.min.css&quot; /&gt;")

    <p>In this case, the CSS for Bootstrap will be loaded from cdnjs, and it that fails a local version will be requested. However, detecting that the CDN has failed to deliver the required CSS file can be difficult, but the Link Tag Helper can help you with this.</p>

    <p>Loading CSS from a CDN may fail silently, meaning that your page will look wrong because of the missing CSS. We can use the one or several attributes for testing whether the desired CSS was loaded properly. Further reading <a href="https://asp.mvc-tutorial.com/tag-helpers/the-link-tag-helper/">here</a></p>

</form>
</div>
